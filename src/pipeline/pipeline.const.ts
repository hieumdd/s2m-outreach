import JoiDefault, { NumberSchema, Schema } from 'joi';
import dayjs from 'dayjs';

import { GetResourcesConfig } from '../outreach/resource.service';
import { CreateLoadStreamOptions } from '../bigquery.service';

const Joi = JoiDefault.defaults((schema) => {
    if (schema.type === 'number') {
        return (schema as NumberSchema)
            .allow(null)
            .unsafe()
            .custom((value) => (value ? (value as number).toFixed(6) : null));
    }

    return schema.allow(null);
});

const timestampSchema = Joi.string().custom((value) => {
    const parsed = dayjs(value);
    return parsed.isValid() ? parsed.toISOString() : null;
});

export type Pipeline = {
    getConfig: GetResourcesConfig;
    schema: Schema;
    loadConfig: CreateLoadStreamOptions;
};

export const Account: Pipeline = {
    getConfig: {
        url: '/accounts',
        params: () => ({}),
    },
    schema: Joi.object({
        id: Joi.number(),
        attributes: Joi.object({
            buyerIntentScore: Joi.number(),
            companyType: Joi.string(),
            createdAt: timestampSchema,
            description: Joi.string(),
            domain: Joi.string(),
            externalSource: Joi.string(),
            followers: Joi.number(),
            foundedAt: timestampSchema,
            industry: Joi.string(),
            linkedInEmployees: Joi.number(),
            linkedInUrl: Joi.string(),
            locality: Joi.string(),
            name: Joi.string(),
            named: Joi.boolean(),
            naturalName: Joi.string(),
            numberOfEmployees: Joi.number(),
            sharingTeamId: Joi.string(),
            touchedAt: timestampSchema,
            updatedAt: timestampSchema,
            websiteUrl: Joi.string(),
        }),
    }),
    loadConfig: {
        table: 'Account',
        schema: [
            { name: 'id', type: 'NUMERIC' },
            {
                name: 'attributes',
                type: 'RECORD',
                fields: [
                    { name: 'buyerIntentScore', type: 'NUMERIC' },
                    { name: 'companyType', type: 'STRING' },
                    { name: 'createdAt', type: 'TIMESTAMP' },
                    { name: 'description', type: 'STRING' },
                    { name: 'domain', type: 'STRING' },
                    { name: 'externalSource', type: 'STRING' },
                    { name: 'followers', type: 'NUMERIC' },
                    { name: 'foundedAt', type: 'TIMESTAMP' },
                    { name: 'industry', type: 'STRING' },
                    { name: 'linkedInEmployees', type: 'NUMERIC' },
                    { name: 'linkedInUrl', type: 'STRING' },
                    { name: 'locality', type: 'STRING' },
                    { name: 'name', type: 'STRING' },
                    { name: 'named', type: 'BOOLEAN' },
                    { name: 'naturalName', type: 'STRING' },
                    { name: 'numberOfEmployees', type: 'NUMERIC' },
                    { name: 'sharingTeamId', type: 'STRING' },
                    { name: 'touchedAt', type: 'TIMESTAMP' },
                    { name: 'updatedAt', type: 'TIMESTAMP' },
                    { name: 'websiteUrl', type: 'STRING' },
                ],
            },
        ],
    },
};

export const Call: Pipeline = {
    getConfig: {
        url: '/calls',
        params: () => ({}),
    },
    schema: Joi.object({
        id: Joi.number(),
        attributes: Joi.object({
            answeredAt: timestampSchema,
            completedAt: timestampSchema,
            createdAt: timestampSchema,
            dialedAt: timestampSchema,
            direction: Joi.string(),
            externalVendor: Joi.string(),
            from: Joi.string(),
            note: Joi.string(),
            outcome: Joi.string(),
            recordingUrl: Joi.string(),
            returnedAt: timestampSchema,
            sequenceAction: Joi.string(),
            shouldRecordCall: Joi.boolean(),
            state: Joi.string(),
            stateChangedAt: timestampSchema,
            to: Joi.string(),
            uid: Joi.string(),
            updatedAt: timestampSchema,
            userCallType: Joi.string(),
            vendorCallId: Joi.string(),
            voicemailRecordingUrl: Joi.string(),
        }),
    }),
    loadConfig: {
        table: 'Call',
        schema: [
            { name: 'id', type: 'NUMERIC' },
            {
                name: 'attributes',
                type: 'RECORD',
                fields: [
                    { name: 'answeredAt', type: 'TIMESTAMP' },
                    { name: 'completedAt', type: 'TIMESTAMP' },
                    { name: 'createdAt', type: 'TIMESTAMP' },
                    { name: 'dialedAt', type: 'TIMESTAMP' },
                    { name: 'direction', type: 'STRING' },
                    { name: 'externalVendor', type: 'STRING' },
                    { name: 'from', type: 'STRING' },
                    { name: 'note', type: 'STRING' },
                    { name: 'outcome', type: 'STRING' },
                    { name: 'recordingUrl', type: 'STRING' },
                    { name: 'returnedAt', type: 'TIMESTAMP' },
                    { name: 'sequenceAction', type: 'STRING' },
                    { name: 'shouldRecordCall', type: 'BOOLEAN' },
                    { name: 'state', type: 'STRING' },
                    { name: 'stateChangedAt', type: 'TIMESTAMP' },
                    { name: 'to', type: 'STRING' },
                    { name: 'uid', type: 'STRING' },
                    { name: 'updatedAt', type: 'TIMESTAMP' },
                    { name: 'userCallType', type: 'STRING' },
                    { name: 'vendorCallId', type: 'STRING' },
                    { name: 'voicemailRecordingUrl', type: 'STRING' },
                ],
            },
        ],
    },
};

export const Opportunity: Pipeline = {
    getConfig: {
        url: '/opportunities',
        params: () => ({}),
    },
    schema: Joi.object({
        id: Joi.number(),
        attributes: Joi.object({
            amount: Joi.number(),
            closeDate: timestampSchema,
            createdAt: timestampSchema,
            currencyType: Joi.string(),
            description: Joi.string(),
            externalCreatedAt: timestampSchema,
            mapLink: Joi.string(),
            mapNextSteps: Joi.string(),
            mapStatus: Joi.string(),
            name: Joi.string(),
            nextStep: Joi.string(),
            opportunityType: Joi.string(),
            probability: Joi.number(),
            prospectingRepId: Joi.string(),
            sharingTeamId: Joi.string(),
            touchedAt: timestampSchema,
            updatedAt: timestampSchema,
        }),
    }),
    loadConfig: {
        table: 'Opportunity',
        schema: [
            { name: 'id', type: 'NUMERIC' },
            {
                name: 'attributes',
                type: 'RECORD',
                fields: [
                    { name: 'amount', type: 'NUMERIC' },
                    { name: 'closeDate', type: 'TIMESTAMP' },
                    { name: 'createdAt', type: 'TIMESTAMP' },
                    { name: 'currencyType', type: 'STRING' },
                    { name: 'description', type: 'STRING' },
                    { name: 'externalCreatedAt', type: 'TIMESTAMP' },
                    { name: 'mapLink', type: 'STRING' },
                    { name: 'mapNextSteps', type: 'STRING' },
                    { name: 'mapStatus', type: 'STRING' },
                    { name: 'name', type: 'STRING' },
                    { name: 'nextStep', type: 'STRING' },
                    { name: 'opportunityType', type: 'STRING' },
                    { name: 'probability', type: 'NUMERIC' },
                    { name: 'prospectingRepId', type: 'STRING' },
                    { name: 'sharingTeamId', type: 'STRING' },
                    { name: 'touchedAt', type: 'TIMESTAMP' },
                    { name: 'updatedAt', type: 'TIMESTAMP' },
                ],
            },
        ],
    },
};

export const Prospect: Pipeline = {
    getConfig: {
        url: '/prospects',
        params: () => ({}),
    },
    schema: Joi.object({
        id: Joi.number(),
        attributes: Joi.object({
            addedAt: timestampSchema,
            addressCity: Joi.string(),
            addressCountry: Joi.string(),
            addressState: Joi.string(),
            addressStreet: Joi.string(),
            addressStreet2: Joi.string(),
            addressZip: Joi.string(),
            angelListUrl: Joi.string(),
            availableAt: timestampSchema,
            callOptedOut: Joi.boolean(),
            callsOptStatus: Joi.string(),
            callsOptedAt: timestampSchema,
            campaignName: Joi.string(),
            clickCount: Joi.number(),
            company: Joi.string(),
            createdAt: timestampSchema,
            dateOfBirth: timestampSchema,
            degree: Joi.string(),
            emailOptedOut: Joi.boolean(),
            emailsOptStatus: Joi.string(),
            emailsOptedAt: timestampSchema,
            engagedAt: timestampSchema,
            engagedScore: Joi.number(),
            eventName: Joi.string(),
            externalId: Joi.string(),
            externalOwner: Joi.string(),
            externalSource: Joi.string(),
            facebookUrl: Joi.string(),
            firstName: Joi.string(),
            gender: Joi.string(),
            githubUrl: Joi.string(),
            githubUsername: Joi.string(),
            googlePlusUrl: Joi.string(),
            graduationDate: timestampSchema,
            jobStartDate: timestampSchema,
            lastName: Joi.string(),
            linkedInConnections: Joi.number(),
            linkedInId: Joi.string(),
            linkedInSlug: Joi.string(),
            linkedInUrl: Joi.string(),
            middleName: Joi.string(),
            name: Joi.string(),
            nickname: Joi.string(),
            occupation: Joi.string(),
            openCount: Joi.number(),
            optedOut: Joi.boolean(),
            optedOutAt: timestampSchema,
            personalNote1: Joi.string(),
            personalNote2: Joi.string(),
            preferredContact: Joi.string(),
            quoraUrl: Joi.string(),
            region: Joi.string(),
            replyCount: Joi.number(),
            school: Joi.string(),
            score: Joi.number(),
            sharingTeamId: Joi.string(),
            source: Joi.string(),
            specialties: Joi.string(),
            stackOverflowId: Joi.string(),
            stackOverflowUrl: Joi.string(),
            timeZone: Joi.string(),
            timeZoneIana: Joi.string(),
            timeZoneInferred: Joi.string(),
            title: Joi.string(),
            touchedAt: timestampSchema,
            trashedAt: timestampSchema,
            twitterUrl: Joi.string(),
            twitterUsername: Joi.string(),
            updatedAt: timestampSchema,
            websiteUrl1: Joi.string(),
            websiteUrl2: Joi.string(),
            websiteUrl3: Joi.string(),
        }),
    }),
    loadConfig: {
        table: 'Prospect',
        schema: [
            { name: 'id', type: 'NUMERIC' },
            {
                name: 'attributes',
                type: 'RECORD',
                fields: [
                    { name: 'addedAt', type: 'TIMESTAMP' },
                    { name: 'addressCity', type: 'STRING' },
                    { name: 'addressCountry', type: 'STRING' },
                    { name: 'addressState', type: 'STRING' },
                    { name: 'addressStreet', type: 'STRING' },
                    { name: 'addressStreet2', type: 'STRING' },
                    { name: 'addressZip', type: 'STRING' },
                    { name: 'angelListUrl', type: 'STRING' },
                    { name: 'availableAt', type: 'TIMESTAMP' },
                    { name: 'callOptedOut', type: 'BOOLEAN' },
                    { name: 'callsOptStatus', type: 'STRING' },
                    { name: 'callsOptedAt', type: 'TIMESTAMP' },
                    { name: 'campaignName', type: 'STRING' },
                    { name: 'clickCount', type: 'NUMERIC' },
                    { name: 'company', type: 'STRING' },
                    { name: 'createdAt', type: 'TIMESTAMP' },
                    { name: 'dateOfBirth', type: 'TIMESTAMP' },
                    { name: 'degree', type: 'STRING' },
                    { name: 'emailOptedOut', type: 'BOOLEAN' },
                    { name: 'emailsOptStatus', type: 'STRING' },
                    { name: 'emailsOptedAt', type: 'TIMESTAMP' },
                    { name: 'engagedAt', type: 'TIMESTAMP' },
                    { name: 'engagedScore', type: 'NUMERIC' },
                    { name: 'eventName', type: 'STRING' },
                    { name: 'externalId', type: 'STRING' },
                    { name: 'externalOwner', type: 'STRING' },
                    { name: 'externalSource', type: 'STRING' },
                    { name: 'facebookUrl', type: 'STRING' },
                    { name: 'firstName', type: 'STRING' },
                    { name: 'gender', type: 'STRING' },
                    { name: 'githubUrl', type: 'STRING' },
                    { name: 'githubUsername', type: 'STRING' },
                    { name: 'googlePlusUrl', type: 'STRING' },
                    { name: 'graduationDate', type: 'TIMESTAMP' },
                    { name: 'jobStartDate', type: 'TIMESTAMP' },
                    { name: 'lastName', type: 'STRING' },
                    { name: 'linkedInConnections', type: 'NUMERIC' },
                    { name: 'linkedInId', type: 'STRING' },
                    { name: 'linkedInSlug', type: 'STRING' },
                    { name: 'linkedInUrl', type: 'STRING' },
                    { name: 'middleName', type: 'STRING' },
                    { name: 'name', type: 'STRING' },
                    { name: 'nickname', type: 'STRING' },
                    { name: 'occupation', type: 'STRING' },
                    { name: 'openCount', type: 'NUMERIC' },
                    { name: 'optedOut', type: 'BOOLEAN' },
                    { name: 'optedOutAt', type: 'TIMESTAMP' },
                    { name: 'personalNote1', type: 'STRING' },
                    { name: 'personalNote2', type: 'STRING' },
                    { name: 'preferredContact', type: 'STRING' },
                    { name: 'quoraUrl', type: 'STRING' },
                    { name: 'region', type: 'STRING' },
                    { name: 'replyCount', type: 'NUMERIC' },
                    { name: 'school', type: 'STRING' },
                    { name: 'score', type: 'NUMERIC' },
                    { name: 'sharingTeamId', type: 'STRING' },
                    { name: 'source', type: 'STRING' },
                    { name: 'specialties', type: 'STRING' },
                    { name: 'stackOverflowId', type: 'STRING' },
                    { name: 'stackOverflowUrl', type: 'STRING' },
                    { name: 'timeZone', type: 'STRING' },
                    { name: 'timeZoneIana', type: 'STRING' },
                    { name: 'timeZoneInferred', type: 'STRING' },
                    { name: 'title', type: 'STRING' },
                    { name: 'touchedAt', type: 'TIMESTAMP' },
                    { name: 'trashedAt', type: 'TIMESTAMP' },
                    { name: 'twitterUrl', type: 'STRING' },
                    { name: 'twitterUsername', type: 'STRING' },
                    { name: 'updatedAt', type: 'TIMESTAMP' },
                    { name: 'websiteUrl1', type: 'STRING' },
                    { name: 'websiteUrl2', type: 'STRING' },
                    { name: 'websiteUrl3', type: 'STRING' },
                ],
            },
        ],
    },
};

export const Sequence: Pipeline = {
    getConfig: {
        url: '/sequences',
        params: () => ({}),
    },
    schema: Joi.object({
        id: Joi.number(),
        attributes: Joi.object({
            automationPercentage: Joi.number(),
            bounceCount: Joi.number(),
            clickCount: Joi.number(),
            createdAt: timestampSchema,
            deliverCount: Joi.number(),
            description: Joi.string(),
            durationInDays: Joi.number(),
            enabled: Joi.boolean(),
            enabledAt: timestampSchema,
            failureCount: Joi.number(),
            finishOnReply: Joi.boolean(),
            lastUsedAt: timestampSchema,
            locked: Joi.boolean(),
            lockedAt: timestampSchema,
            maxActivations: Joi.number(),
            name: Joi.string(),
            negativeReplyCount: Joi.number(),
            neutralReplyCount: Joi.number(),
            numContactedProspects: Joi.number(),
            numRepliedProspects: Joi.number(),
            openCount: Joi.number(),
            optOutCount: Joi.number(),
            positiveReplyCount: Joi.number(),
            primaryReplyAction: Joi.string(),
            primaryReplyPauseDuration: Joi.number(),
            replyCount: Joi.number(),
            scheduleCount: Joi.number(),
            scheduleIntervalType: Joi.string(),
            secondaryReplyAction: Joi.string(),
            secondaryReplyPauseDuration: Joi.number(),
            sequenceStepCount: Joi.number(),
            sequenceType: Joi.string(),
            shareType: Joi.string(),
            throttleCapacity: Joi.number(),
            throttleMaxAddsPerDay: Joi.number(),
            throttlePaused: Joi.boolean(),
            throttlePausedAt: timestampSchema,
            transactional: Joi.boolean(),
            updatedAt: timestampSchema,
        }),
    }),
    loadConfig: {
        table: 'Sequence',
        schema: [
            { name: 'id', type: 'NUMERIC' },
            {
                name: 'attributes',
                type: 'RECORD',
                fields: [
                    { name: 'automationPercentage', type: 'NUMERIC' },
                    { name: 'bounceCount', type: 'NUMERIC' },
                    { name: 'clickCount', type: 'NUMERIC' },
                    { name: 'createdAt', type: 'TIMESTAMP' },
                    { name: 'deliverCount', type: 'NUMERIC' },
                    { name: 'description', type: 'STRING' },
                    { name: 'durationInDays', type: 'NUMERIC' },
                    { name: 'enabled', type: 'BOOLEAN' },
                    { name: 'enabledAt', type: 'TIMESTAMP' },
                    { name: 'failureCount', type: 'NUMERIC' },
                    { name: 'finishOnReply', type: 'BOOLEAN' },
                    { name: 'lastUsedAt', type: 'TIMESTAMP' },
                    { name: 'locked', type: 'BOOLEAN' },
                    { name: 'lockedAt', type: 'TIMESTAMP' },
                    { name: 'maxActivations', type: 'NUMERIC' },
                    { name: 'name', type: 'STRING' },
                    { name: 'negativeReplyCount', type: 'NUMERIC' },
                    { name: 'neutralReplyCount', type: 'NUMERIC' },
                    { name: 'numContactedProspects', type: 'NUMERIC' },
                    { name: 'numRepliedProspects', type: 'NUMERIC' },
                    { name: 'openCount', type: 'NUMERIC' },
                    { name: 'optOutCount', type: 'NUMERIC' },
                    { name: 'positiveReplyCount', type: 'NUMERIC' },
                    { name: 'primaryReplyAction', type: 'STRING' },
                    { name: 'primaryReplyPauseDuration', type: 'NUMERIC' },
                    { name: 'replyCount', type: 'NUMERIC' },
                    { name: 'scheduleCount', type: 'NUMERIC' },
                    { name: 'scheduleIntervalType', type: 'STRING' },
                    { name: 'secondaryReplyAction', type: 'STRING' },
                    { name: 'secondaryReplyPauseDuration', type: 'NUMERIC' },
                    { name: 'sequenceStepCount', type: 'NUMERIC' },
                    { name: 'sequenceType', type: 'STRING' },
                    { name: 'shareType', type: 'STRING' },
                    { name: 'throttleCapacity', type: 'NUMERIC' },
                    { name: 'throttleMaxAddsPerDay', type: 'NUMERIC' },
                    { name: 'throttlePaused', type: 'BOOLEAN' },
                    { name: 'throttlePausedAt', type: 'TIMESTAMP' },
                    { name: 'transactional', type: 'BOOLEAN' },
                    { name: 'updatedAt', type: 'TIMESTAMP' },
                ],
            },
        ],
    },
};

export const SequenceState: Pipeline = {
    getConfig: {
        url: '/sequenceStates',
        params: () => ({}),
    },
    schema: Joi.object({
        id: Joi.number(),
        relationships: Joi.object({
            sequence: Joi.object({
                data: Joi.object({
                    id: Joi.number(),
                    type: Joi.string(),
                }),
            }),
        }),
        attributes: Joi.object({
            activeAt: timestampSchema,
            bounceCount: Joi.number(),
            callCompletedAt: timestampSchema,
            clickCount: Joi.number(),
            createdAt: timestampSchema,
            deliverCount: Joi.number(),
            errorReason: Joi.string(),
            failureCount: Joi.number(),
            negativeReplyCount: Joi.number(),
            neutralReplyCount: Joi.number(),
            openCount: Joi.number(),
            optOutCount: Joi.number(),
            pauseReason: Joi.string(),
            positiveReplyCount: Joi.number(),
            repliedAt: timestampSchema,
            replyCount: Joi.number(),
            scheduleCount: Joi.number(),
            state: Joi.string(),
            stateChangedAt: timestampSchema,
            updatedAt: timestampSchema,
        }),
    }),
    loadConfig: {
        table: 'SequenceState',
        schema: [
            { name: 'id', type: 'NUMERIC' },
            {
                name: 'relationships',
                type: 'RECORD',
                fields: [
                    {
                        name: 'sequence',
                        type: 'RECORD',
                        fields: [
                            {
                                name: 'data',
                                type: 'RECORD',
                                fields: [
                                    { name: 'id', type: 'NUMERIC' },
                                    { name: 'type', type: 'STRING' },
                                ],
                            },
                        ],
                    },
                ],
            },
            {
                name: 'attributes',
                type: 'RECORD',
                fields: [
                    { name: 'activeAt', type: 'TIMESTAMP' },
                    { name: 'bounceCount', type: 'NUMERIC' },
                    { name: 'callCompletedAt', type: 'TIMESTAMP' },
                    { name: 'clickCount', type: 'NUMERIC' },
                    { name: 'createdAt', type: 'TIMESTAMP' },
                    { name: 'deliverCount', type: 'NUMERIC' },
                    { name: 'errorReason', type: 'STRING' },
                    { name: 'failureCount', type: 'NUMERIC' },
                    { name: 'negativeReplyCount', type: 'NUMERIC' },
                    { name: 'neutralReplyCount', type: 'NUMERIC' },
                    { name: 'openCount', type: 'NUMERIC' },
                    { name: 'optOutCount', type: 'NUMERIC' },
                    { name: 'pauseReason', type: 'STRING' },
                    { name: 'positiveReplyCount', type: 'NUMERIC' },
                    { name: 'repliedAt', type: 'TIMESTAMP' },
                    { name: 'replyCount', type: 'NUMERIC' },
                    { name: 'scheduleCount', type: 'NUMERIC' },
                    { name: 'state', type: 'STRING' },
                    { name: 'stateChangedAt', type: 'TIMESTAMP' },
                    { name: 'updatedAt', type: 'TIMESTAMP' },
                ],
            },
        ],
    },
};

export const Template: Pipeline = {
    getConfig: {
        url: '/templates',
        params: () => ({}),
    },
    schema: Joi.object({
        id: Joi.number(),
        attributes: Joi.object({
            archived: Joi.boolean(),
            archivedAt: timestampSchema,
            bodyHtml: Joi.string(),
            bodyText: Joi.string(),
            bounceCount: Joi.number(),
            clickCount: Joi.number(),
            createdAt: timestampSchema,
            deliverCount: Joi.number(),
            failureCount: Joi.number(),
            lastUsedAt: timestampSchema,
            name: Joi.string(),
            negativeReplyCount: Joi.number(),
            neutralReplyCount: Joi.number(),
            openCount: Joi.number(),
            optOutCount: Joi.number(),
            positiveReplyCount: Joi.number(),
            replyCount: Joi.number(),
            scheduleCount: Joi.number(),
            shareType: Joi.string(),
            subject: Joi.string(),
            trackLinks: Joi.boolean(),
            trackOpens: Joi.boolean(),
            updatedAt: timestampSchema,
        }),
    }),
    loadConfig: {
        table: 'Template',
        schema: [
            { name: 'id', type: 'NUMERIC' },
            {
                name: 'attributes',
                type: 'RECORD',
                fields: [
                    { name: 'archived', type: 'BOOLEAN' },
                    { name: 'archivedAt', type: 'TIMESTAMP' },
                    { name: 'bodyHtml', type: 'STRING' },
                    { name: 'bodyText', type: 'STRING' },
                    { name: 'bounceCount', type: 'NUMERIC' },
                    { name: 'clickCount', type: 'NUMERIC' },
                    { name: 'createdAt', type: 'TIMESTAMP' },
                    { name: 'deliverCount', type: 'NUMERIC' },
                    { name: 'failureCount', type: 'NUMERIC' },
                    { name: 'lastUsedAt', type: 'TIMESTAMP' },
                    { name: 'name', type: 'STRING' },
                    { name: 'negativeReplyCount', type: 'NUMERIC' },
                    { name: 'neutralReplyCount', type: 'NUMERIC' },
                    { name: 'openCount', type: 'NUMERIC' },
                    { name: 'optOutCount', type: 'NUMERIC' },
                    { name: 'positiveReplyCount', type: 'NUMERIC' },
                    { name: 'replyCount', type: 'NUMERIC' },
                    { name: 'scheduleCount', type: 'NUMERIC' },
                    { name: 'shareType', type: 'STRING' },
                    { name: 'subject', type: 'STRING' },
                    { name: 'trackLinks', type: 'BOOLEAN' },
                    { name: 'trackOpens', type: 'BOOLEAN' },
                    { name: 'updatedAt', type: 'TIMESTAMP' },
                ],
            },
        ],
    },
};

export const User: Pipeline = {
    getConfig: {
        url: '/users',
        params: () => ({}),
    },
    schema: Joi.object({
        id: Joi.number(),
        attributes: Joi.object({
            accountsViewId: Joi.number(),
            activityNotificationsDisabled: Joi.boolean(),
            bounceWarningEmailEnabled: Joi.boolean(),
            bridgePhone: Joi.string(),
            bridgePhoneExtension: Joi.string(),
            callsViewId: Joi.number(),
            controlledTabDefault: Joi.string(),
            createdAt: timestampSchema,
            currentSignInAt: timestampSchema,
            dailyDigestEmailEnabled: Joi.boolean(),
            defaultRulesetId: Joi.number(),
            email: Joi.string(),
            enableVoiceRecordings: Joi.boolean(),
            engagementEmailsEnabled: Joi.boolean(),
            firstName: Joi.string(),
            inboundBridgePhone: Joi.string(),
            inboundBridgePhoneExtension: Joi.string(),
            inboundCallBehavior: Joi.string(),
            inboundPhoneType: Joi.string(),
            inboundVoicemailCustomMessageText: Joi.string(),
            inboundVoicemailMessageTextVoice: Joi.string(),
            inboundVoicemailPromptType: Joi.string(),
            kaiaRecordingsViewId: Joi.number(),
            keepBridgePhoneConnected: Joi.boolean(),
            lastName: Joi.string(),
            lastSignInAt: timestampSchema,
            locked: Joi.boolean(),
            mailboxErrorEmailEnabled: Joi.boolean(),
            meetingEngagementNotificationEnabled: Joi.boolean(),
            name: Joi.string(),
            notificationsEnabled: Joi.boolean(),
            oceClickToDialEverywhere: Joi.boolean(),
            oceGmailToolbar: Joi.boolean(),
            oceGmailTrackingState: Joi.string(),
            oceSalesforceEmailDecorating: Joi.boolean(),
            oceSalesforcePhoneDecorating: Joi.boolean(),
            oceUniversalTaskFlow: Joi.boolean(),
            oceWindowMode: Joi.boolean(),
            opportunitiesViewId: Joi.number(),
            passwordExpiresAt: timestampSchema,
            phoneCountryCode: Joi.string(),
            phoneNumber: Joi.string(),
            phoneType: Joi.string(),
            pluginAlertNotificationEnabled: Joi.boolean(),
            preferredVoiceRegion: Joi.string(),
            prefersLocalPresence: Joi.boolean(),
            primaryTimezone: Joi.string(),
            prospectsViewId: Joi.number(),
            reportsTeamPerfViewId: Joi.number(),
            reportsViewId: Joi.number(),
            scimExternalId: Joi.string(),
            scimSource: Joi.string(),
            secondaryTimezone: Joi.string(),
            senderNotificationsExcluded: Joi.boolean(),
            tasksViewId: Joi.number(),
            teamsViewId: Joi.number(),
            tertiaryTimezone: Joi.string(),
            textingEmailNotifications: Joi.boolean(),
            title: Joi.string(),
            unknownReplyEmailEnabled: Joi.boolean(),
            updatedAt: timestampSchema,
            userGuid: Joi.string(),
            username: Joi.string(),
            usersViewId: Joi.number(),
            voicemailNotificationEnabled: Joi.boolean(),
            weeklyDigestEmailEnabled: Joi.boolean(),
        }),
    }),
    loadConfig: {
        table: 'User',
        schema: [
            { name: 'id', type: 'NUMERIC' },
            {
                name: 'attributes',
                type: 'RECORD',
                fields: [
                    { name: 'accountsViewId', type: 'NUMERIC' },
                    { name: 'activityNotificationsDisabled', type: 'BOOLEAN' },
                    { name: 'bounceWarningEmailEnabled', type: 'BOOLEAN' },
                    { name: 'bridgePhone', type: 'STRING' },
                    { name: 'bridgePhoneExtension', type: 'STRING' },
                    { name: 'callsViewId', type: 'NUMERIC' },
                    { name: 'controlledTabDefault', type: 'STRING' },
                    { name: 'createdAt', type: 'TIMESTAMP' },
                    { name: 'currentSignInAt', type: 'TIMESTAMP' },
                    { name: 'dailyDigestEmailEnabled', type: 'BOOLEAN' },
                    { name: 'defaultRulesetId', type: 'NUMERIC' },
                    { name: 'email', type: 'STRING' },
                    { name: 'enableVoiceRecordings', type: 'BOOLEAN' },
                    { name: 'engagementEmailsEnabled', type: 'BOOLEAN' },
                    { name: 'firstName', type: 'STRING' },
                    { name: 'inboundBridgePhone', type: 'STRING' },
                    { name: 'inboundBridgePhoneExtension', type: 'STRING' },
                    { name: 'inboundCallBehavior', type: 'STRING' },
                    { name: 'inboundPhoneType', type: 'STRING' },
                    { name: 'inboundVoicemailCustomMessageText', type: 'STRING' },
                    { name: 'inboundVoicemailMessageTextVoice', type: 'STRING' },
                    { name: 'inboundVoicemailPromptType', type: 'STRING' },
                    { name: 'kaiaRecordingsViewId', type: 'NUMERIC' },
                    { name: 'keepBridgePhoneConnected', type: 'BOOLEAN' },
                    { name: 'lastName', type: 'STRING' },
                    { name: 'lastSignInAt', type: 'TIMESTAMP' },
                    { name: 'locked', type: 'BOOLEAN' },
                    { name: 'mailboxErrorEmailEnabled', type: 'BOOLEAN' },
                    { name: 'meetingEngagementNotificationEnabled', type: 'BOOLEAN' },
                    { name: 'name', type: 'STRING' },
                    { name: 'notificationsEnabled', type: 'BOOLEAN' },
                    { name: 'oceClickToDialEverywhere', type: 'BOOLEAN' },
                    { name: 'oceGmailToolbar', type: 'BOOLEAN' },
                    { name: 'oceGmailTrackingState', type: 'STRING' },
                    { name: 'oceSalesforceEmailDecorating', type: 'BOOLEAN' },
                    { name: 'oceSalesforcePhoneDecorating', type: 'BOOLEAN' },
                    { name: 'oceUniversalTaskFlow', type: 'BOOLEAN' },
                    { name: 'oceWindowMode', type: 'BOOLEAN' },
                    { name: 'opportunitiesViewId', type: 'NUMERIC' },
                    { name: 'passwordExpiresAt', type: 'TIMESTAMP' },
                    { name: 'phoneCountryCode', type: 'STRING' },
                    { name: 'phoneNumber', type: 'STRING' },
                    { name: 'phoneType', type: 'STRING' },
                    { name: 'pluginAlertNotificationEnabled', type: 'BOOLEAN' },
                    { name: 'preferredVoiceRegion', type: 'STRING' },
                    { name: 'prefersLocalPresence', type: 'BOOLEAN' },
                    { name: 'primaryTimezone', type: 'STRING' },
                    { name: 'prospectsViewId', type: 'NUMERIC' },
                    { name: 'reportsTeamPerfViewId', type: 'NUMERIC' },
                    { name: 'reportsViewId', type: 'NUMERIC' },
                    { name: 'scimExternalId', type: 'STRING' },
                    { name: 'scimSource', type: 'STRING' },
                    { name: 'secondaryTimezone', type: 'STRING' },
                    { name: 'senderNotificationsExcluded', type: 'BOOLEAN' },
                    { name: 'tasksViewId', type: 'NUMERIC' },
                    { name: 'teamsViewId', type: 'NUMERIC' },
                    { name: 'tertiaryTimezone', type: 'STRING' },
                    { name: 'textingEmailNotifications', type: 'BOOLEAN' },
                    { name: 'title', type: 'STRING' },
                    { name: 'unknownReplyEmailEnabled', type: 'BOOLEAN' },
                    { name: 'updatedAt', type: 'TIMESTAMP' },
                    { name: 'userGuid', type: 'STRING' },
                    { name: 'username', type: 'STRING' },
                    { name: 'usersViewId', type: 'NUMERIC' },
                    { name: 'voicemailNotificationEnabled', type: 'BOOLEAN' },
                    { name: 'weeklyDigestEmailEnabled', type: 'BOOLEAN' },
                ],
            },
        ],
    },
};
